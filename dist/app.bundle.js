!function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:r})},n.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=5)}([function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,r=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var i,o=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(o)?e:(i=0===o.indexOf("//")?o:0===o.indexOf("/")?n+o:r+o.replace(/^\.\//,""),"url("+JSON.stringify(i)+")")})}},function(e,t,n){var r,i,o={},a=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===i&&(i=r.apply(this,arguments)),i}),c=function(e){var t={};return function(e){if("function"==typeof e)return e();if(void 0===t[e]){var n=function(e){return document.querySelector(e)}.call(this,e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}}(),l=null,s=0,u=[],f=n(0);function d(e,t){for(var n=0;n<e.length;n++){var r=e[n],i=o[r.id];if(i){i.refs++;for(var a=0;a<i.parts.length;a++)i.parts[a](r.parts[a]);for(;a<r.parts.length;a++)i.parts.push(b(r.parts[a],t))}else{var c=[];for(a=0;a<r.parts.length;a++)c.push(b(r.parts[a],t));o[r.id]={id:r.id,refs:1,parts:c}}}}function h(e,t){for(var n=[],r={},i=0;i<e.length;i++){var o=e[i],a=t.base?o[0]+t.base:o[0],c={css:o[1],media:o[2],sourceMap:o[3]};r[a]?r[a].parts.push(c):n.push(r[a]={id:a,parts:[c]})}return n}function p(e,t){var n=c(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=u[u.length-1];if("top"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),u.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var i=c(e.insertInto+" "+e.insertAt.before);n.insertBefore(t,i)}}function y(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=u.indexOf(e);t>=0&&u.splice(t,1)}function m(e){var t=document.createElement("style");return e.attrs.type="text/css",v(t,e.attrs),p(e,t),t}function v(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function b(e,t){var n,r,i,o;if(t.transform&&e.css){if(!(o=t.transform(e.css)))return function(){};e.css=o}if(t.singleton){var a=s++;n=l||(l=m(t)),r=x.bind(null,n,a,!1),i=x.bind(null,n,a,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return e.attrs.type="text/css",e.attrs.rel="stylesheet",v(t,e.attrs),p(e,t),t}(t),r=function(e,t,n){var r=n.css,i=n.sourceMap,o=void 0===t.convertToAbsoluteUrls&&i;(t.convertToAbsoluteUrls||o)&&(r=f(r));i&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+" */");var a=new Blob([r],{type:"text/css"}),c=e.href;e.href=URL.createObjectURL(a),c&&URL.revokeObjectURL(c)}.bind(null,n,t),i=function(){y(n),n.href&&URL.revokeObjectURL(n.href)}):(n=m(t),r=function(e,t){var n=t.css,r=t.media;r&&e.setAttribute("media",r);if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),i=function(){y(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else i()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=a()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=h(e,t);return d(n,t),function(e){for(var r=[],i=0;i<n.length;i++){var a=n[i];(c=o[a.id]).refs--,r.push(c)}e&&d(h(e,t),t);for(i=0;i<r.length;i++){var c;if(0===(c=r[i]).refs){for(var l=0;l<c.parts.length;l++)c.parts[l]();delete o[c.id]}}}};var g,w=(g=[],function(e,t){return g[e]=t,g.filter(Boolean).join("\n")});function x(e,t,n,r){var i=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=w(t,i);else{var o=document.createTextNode(i),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(o,a[t]):e.appendChild(o)}}},function(e,t){e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var i=(a=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */"),o=r.sources.map(function(e){return"/*# sourceURL="+r.sourceRoot+e+" */"});return[n].concat(o).concat([i]).join("\n")}var a;return[n].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n}).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},i=0;i<this.length;i++){var o=this[i][0];"number"==typeof o&&(r[o]=!0)}for(i=0;i<e.length;i++){var a=e[i];"number"==typeof a[0]&&r[a[0]]||(n&&!a[2]?a[2]=n:n&&(a[2]="("+a[2]+") and ("+n+")"),t.push(a))}},t}},function(e,t,n){(e.exports=n(2)(!1)).push([e.i,"body {\n    margin: 0;\n    padding: 0;\n    width: 100vw;\n    height: 100vh;\n}\n\ncanvas {\n    width: 100vw;\n    height: 100vh;\n}",""])},function(e,t,n){var r=n(3);"string"==typeof r&&(r=[[e.i,r,""]]);var i={hmr:!0,transform:void 0,insertInto:void 0};n(1)(r,i);r.locals&&(e.exports=r.locals)},function(e,t,n){"use strict";n.r(t);n(4);let r,i=0;function o(e){let t=r;return 2*e*Math.tan(180/t.segment*(Math.PI/180))}function a(e,t,n){let i=r,a=o(t);e.fillStyle=n,e.beginPath(),e.moveTo(i.middle-a/2-5,t),e.lineTo(i.middle+a/2+5,t),e.lineTo(i.middle,0),e.closePath(),e.fill()}function c(e,t,n,i,o){let a=r;e.fillStyle=i,e.beginPath(),e.moveTo(a.middle,t),e.quadraticCurveTo(a.middle-n,t,a.middle,t+n),e.quadraticCurveTo(a.middle+n,t,a.middle,t),e.fill(),o&&(e.strokeStyle=o,e.stroke())}function l(){let e=function(){let e=r,t=(Math.sin(i++/10),e.center.y,document.createElement("canvas"));t.width=e._width,t.height=e.radius;let n=t.getContext("2d");return n.strokeStyle="white",n.lineWidth=2,n.fillStyle="#222222",n.beginPath(),n.moveTo(0,.5*e.height),n.lineTo(e._width,.5*e.height),n.lineTo(e.middle,0),n.closePath(),n.clip(),c(n,.55*e.center.y,o(.6*e.center.y),"turquoise","white"),a(n,.6*e.center.y,"turquoise"),c(n,.33*e.center.y,o(.35*e.center.y),"black","black"),a(n,.35*e.center.y,"black"),c(n,.25*e.center.y,o(.25*e.center.y)-10,"yellow"),c(n,.5*e.center.y+10,o(.5*e.center.y)-10,"blue"),n.fillStyle="red",n.beginPath(),n.moveTo(0,.75*e.center.y),n.quadraticCurveTo(.5*e._width,.75*e.center.y,0,.9*e.center.y),n.fill(),n.beginPath(),n.moveTo(e._width,.75*e.center.y),n.quadraticCurveTo(.5*e._width,.75*e.center.y,e._width,.9*e.center.y),n.fill(),n.fillStyle="white",n.beginPath(),n.arc(e.middle,.8*e.center.y,3,0,2*Math.PI),n.fill(),n.fillStyle="white",n.beginPath(),n.arc(e.middle-.25*o(.9*e.center.y),.9*e.center.y,3,0,2*Math.PI),n.fill(),n.fillStyle="white",n.beginPath(),n.arc(e.middle+.25*o(.9*e.center.y),.9*e.center.y,3,0,2*Math.PI),n.fill(),t}(),t=r,n=document.querySelector("canvas").getContext("2d"),s=Math.TAU/t.segment*.5;n.fillStyle="black",n.fillRect(0,0,t.width,t.height);for(let r=0;r<t.segment;r++)n.translate(t.center.x,t.center.y),n.rotate(2*s),n.drawImage(e,.5*-e.width,0),n.translate(-t.center.x,-t.center.y);n.fillStyle="white",n.beginPath(),n.arc(t.center.x,t.center.y,3,0,2*Math.PI),n.fill(),requestAnimationFrame(l)}Math.TAU=2*Math.PI,document.addEventListener("DOMContentLoaded",function(){(r={width:document.body.clientWidth,height:document.body.clientHeight,center:{x:.5*document.body.clientWidth,y:.5*document.body.clientHeight},radius:.5*Math.min(document.body.clientWidth,document.body.clientHeight),segment:16})._width=2*r.radius*Math.tan(180/r.segment*(Math.PI/180))+2,r.middle=.5*r._width;let e=document.createElement("canvas");e.width=r.width,e.height=r.height,document.body.appendChild(e),l()})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,